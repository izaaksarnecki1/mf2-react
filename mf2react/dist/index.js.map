{"version":3,"sources":["../src/index.ts","../src/plugin.ts"],"sourcesContent":["export * from \"./plugin\";\n","import type { PostProcessorModule, TOptions } from \"i18next\";\nimport MessageFormat from \"@messageformat/core\";\n\nconst mflng = new Map<string, MessageFormat>();\n\nconst getMf = (lng?: string) => {\n  const lang = lng || \"en\";\n  let mf = mflng.get(lang);\n  if (!mf) {\n    mf = new MessageFormat(lang);\n    mflng.set(lang, mf);\n  }\n  return mf;\n};\n\nconst tagAlias: Record<string, string> = {\n  bold: \"strong\",\n  b: \"strong\",\n  i: \"em\",\n  italic: \"em\",\n  br: \"br\",\n  u: \"u\",\n  s: \"s\",\n  code: \"code\",\n  small: \"small\",\n  strong: \"strong\",\n  em: \"em\",\n};\n\nfunction mf2CurlyToAngle(input: string): string {\n  input = input.replace(/\\{#([A-Za-z][\\w-]*)\\s*\\/\\}/g, (_, t) => {\n    const html = tagAlias[t] || t;\n    return `<${html} />`;\n  });\n  input = input.replace(\n    /\\{#([A-Za-z][\\w-]*)\\}/g,\n    (_, t) => `<${tagAlias[t] || t}>`\n  );\n  input = input.replace(\n    /\\{\\/([A-Za-z][\\w-]*)\\}/g,\n    (_, t) => `</${tagAlias[t] || t}>`\n  );\n  return input;\n}\n\nconst compiledCache = new Map<\n  string,\n  (params: Record<string, unknown>) => string\n>();\n\nexport const MF2PostProcessor: PostProcessorModule = {\n  name: \"mf2\",\n  type: \"postProcessor\",\n  process: (\n    value: string,\n    _key: string | string[],\n    options: TOptions,\n    translator: any\n  ) => {\n    if (typeof value !== \"string\") return value;\n\n    const lng: string = options?.lng || translator?.lang;\n    const mf = getMf(lng);\n\n    const cacheKey = `${lng || \"en\"}__${value}`;\n    let fn = compiledCache.get(cacheKey);\n    if (!fn) {\n      fn = mf.compile(value);\n      compiledCache.set(cacheKey, fn);\n    }\n\n    try {\n      const out = fn({ ...options });\n      return typeof out === \"string\" ? mf2CurlyToAngle(out) : out;\n    } catch {\n      return value;\n    }\n  },\n};\n\nexport default MF2PostProcessor;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,kBAA0B;AAE1B,IAAM,QAAQ,oBAAI,IAA2B;AAE7C,IAAM,QAAQ,CAAC,QAAiB;AAC9B,QAAM,OAAO,OAAO;AACpB,MAAI,KAAK,MAAM,IAAI,IAAI;AACvB,MAAI,CAAC,IAAI;AACP,SAAK,IAAI,YAAAA,QAAc,IAAI;AAC3B,UAAM,IAAI,MAAM,EAAE;AAAA,EACpB;AACA,SAAO;AACT;AAEA,IAAM,WAAmC;AAAA,EACvC,MAAM;AAAA,EACN,GAAG;AAAA,EACH,GAAG;AAAA,EACH,QAAQ;AAAA,EACR,IAAI;AAAA,EACJ,GAAG;AAAA,EACH,GAAG;AAAA,EACH,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,IAAI;AACN;AAEA,SAAS,gBAAgB,OAAuB;AAC9C,UAAQ,MAAM,QAAQ,+BAA+B,CAAC,GAAG,MAAM;AAC7D,UAAM,OAAO,SAAS,CAAC,KAAK;AAC5B,WAAO,IAAI,IAAI;AAAA,EACjB,CAAC;AACD,UAAQ,MAAM;AAAA,IACZ;AAAA,IACA,CAAC,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,CAAC;AAAA,EAChC;AACA,UAAQ,MAAM;AAAA,IACZ;AAAA,IACA,CAAC,GAAG,MAAM,KAAK,SAAS,CAAC,KAAK,CAAC;AAAA,EACjC;AACA,SAAO;AACT;AAEA,IAAM,gBAAgB,oBAAI,IAGxB;AAEK,IAAM,mBAAwC;AAAA,EACnD,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS,CACP,OACA,MACA,SACA,eACG;AACH,QAAI,OAAO,UAAU,SAAU,QAAO;AAEtC,UAAM,MAAc,SAAS,OAAO,YAAY;AAChD,UAAM,KAAK,MAAM,GAAG;AAEpB,UAAM,WAAW,GAAG,OAAO,IAAI,KAAK,KAAK;AACzC,QAAI,KAAK,cAAc,IAAI,QAAQ;AACnC,QAAI,CAAC,IAAI;AACP,WAAK,GAAG,QAAQ,KAAK;AACrB,oBAAc,IAAI,UAAU,EAAE;AAAA,IAChC;AAEA,QAAI;AACF,YAAM,MAAM,GAAG,EAAE,GAAG,QAAQ,CAAC;AAC7B,aAAO,OAAO,QAAQ,WAAW,gBAAgB,GAAG,IAAI;AAAA,IAC1D,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AACF;","names":["MessageFormat"]}